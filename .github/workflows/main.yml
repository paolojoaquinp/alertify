# 1. INSTALAR FLUTTER 
# 2. INSTALAR FLUTTER
# 3. GENERAR UNA APK
# 4. GUARD
#     - flutter analyze
#     - flutter test
# 5. GENERAR IPA
#     - INSTALAR PERFIL TEMPORAL
#     - INSTALAR CERTIFICADOS
#     - CONFIGURAR KEY CHAIN
# 6. APP DISTRIBUTION CLI
#     - firebase tools
#     - google-application-credential.json
# 7. artifact
# 8. CACHE STRATEGY

name: FLUTTER_MASTER_1
on:
  push:
    branches:
      - gh-actions/alertify

jobs:
  flutter_master_dev:
    runs-on: macos-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: google-application-credentials.json
    steps:
      - name: Cache Primes
        id: cache-primes
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules/ 
            **/Users/runner/
          key: ${{ runner.os }}-primes
 
      - name: COPY .
        uses: actions/checkout@v4
      - name: INSTALACION DE JAVA
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11'

      # - name: Install the Apple certificate and provisioning profile
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # import certificate and provisioning profile from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
      #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: INSTALACION DE FIREBASE TOOLS
        run: npm install -g firebase-tools

      - name: INSTALL FLUTTER
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.24.0
      - run: flutter --version

      - name: FLUTTER TEST
        run: flutter test

      - name: FLUTTER ANALYZE
        run: flutter analyze

      - name: GOOGLE_CREDENTIAL
        shell: bash
        run: |
          echo "${{ secrets.JSON_APP_CREDENTIAL_ACCESS }}" | base64 --decode > "google-application-credentials.json"

      - name: GENERAR APK
        run: flutter build apk --release
        
      # - name: GENERAR IPA
      #   run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist

      - name: UPLOAD APK DISTRIBUTION
        run: firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk --app 1:865785082084:android:44dff0aafa459d9b267cf1 --groups "testers"

      - name: ARTIFACT
        uses: actions/upload-artifact@v4
        with:
          name: apk-and-ipa
          path: |
            build/app/outputs/flutter-apk/app-release.apk